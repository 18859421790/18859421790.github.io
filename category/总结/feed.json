{
    "version": "https://jsonfeed.org/version/1",
    "title": "xu·live • All posts by \"总结\" category",
    "description": "永远热泪盈眶",
    "home_page_url": "https://18859421790.github.io",
    "items": [
        {
            "id": "https://18859421790.github.io/2023/10/08/2023.10.8/",
            "url": "https://18859421790.github.io/2023/10/08/2023.10.8/",
            "title": "react+ts 使用总结",
            "date_published": "2023-10-07T16:00:00.000Z",
            "content_html": "<h2 id=\"可能是你需要的-react-typescript-50-条规范和经验\"><a class=\"markdownIt-Anchor\" href=\"#可能是你需要的-react-typescript-50-条规范和经验\">#</a> 可能是你需要的 React + TypeScript 50 条规范和经验</h2>\n<blockquote>\n<p>这篇文章没有对错之分，肯定也有不完善的地方，结合了自己日常开发和经验。可以让你书写代码更具严谨性，希望看完之后有所帮助。本文字数 4000+ ，看完本文大概需半小时。</p>\n</blockquote>\n<h3 id=\"1-注释\"><a class=\"markdownIt-Anchor\" href=\"#1-注释\">#</a> 1. 注释</h3>\n<h4 id=\"1-文件顶部的注释包括描述-作者-日期\"><a class=\"markdownIt-Anchor\" href=\"#1-文件顶部的注释包括描述-作者-日期\">#</a> (1) 文件顶部的注释，包括描述、作者、日期</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> <span class=\"variable\">xxxxxx</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> <span class=\"variable\">chengfeng</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 19/05/21</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-模块的注释\"><a class=\"markdownIt-Anchor\" href=\"#2-模块的注释\">#</a> (2) 模块的注释</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 拷贝数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">*</span>&#125;  data   要拷贝的源数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  &#123;<span class=\"type\">boolean</span>&#125; [isDeep=false] 是否深拷贝，默认浅拷贝</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125;         返回拷贝后的数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-业务代码注释\"><a class=\"markdownIt-Anchor\" href=\"#3-业务代码注释\">#</a> (3) 业务代码注释</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*业务代码注释*/</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-变量注释\"><a class=\"markdownIt-Anchor\" href=\"#4-变量注释\">#</a> (4) 变量注释</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">IState</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 名字</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: string;</span><br><span class=\"line\">  <span class=\"comment\">// 电话</span></span><br><span class=\"line\">  <span class=\"attr\">phone</span>: number;</span><br><span class=\"line\">  <span class=\"comment\">// 地址</span></span><br><span class=\"line\">  <span class=\"attr\">address</span>: string;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-引用组件顺序\"><a class=\"markdownIt-Anchor\" href=\"#2-引用组件顺序\">#</a> 2. 引用组件顺序</h3>\n<ul>\n<li>先引用外部组件库，再引用当前组件块级组件，然后是 common 里的公共函数库最后是 css 样式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Dropdown</span>, <span class=\"title class_\">Menu</span>, <span class=\"title class_\">Icon</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;antd&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Header</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Header&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> toast <span class=\"keyword\">from</span> <span class=\"string\">&quot;common/toast&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./index.less&quot;</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-引号\"><a class=\"markdownIt-Anchor\" href=\"#3-引号\">#</a> 3. 引号</h3>\n<ul>\n<li>使用单引号，或者 es6 的反引号</li>\n</ul>\n<h3 id=\"4-缩进\"><a class=\"markdownIt-Anchor\" href=\"#4-缩进\">#</a> 4. 缩进</h3>\n<ul>\n<li>使用两个空格</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">handleCheck</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  onCancel &amp;&amp; <span class=\"title function_\">onCancel</span>();</span><br><span class=\"line\">  onClose &amp;&amp; <span class=\"title function_\">onClose</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-分号\"><a class=\"markdownIt-Anchor\" href=\"#5-分号\">#</a> 5. 分号</h3>\n<ul>\n<li>除了代码块的以外的每个表达式后必须加分号。</li>\n</ul>\n<h3 id=\"6-括号\"><a class=\"markdownIt-Anchor\" href=\"#6-括号\">#</a> 6. 括号</h3>\n<p>下列关键字后必须有大括号（即使代码块的内容只有一行）：if, else, for, while, do, switch, try, catch, finally, with。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// not good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) <span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-空格\"><a class=\"markdownIt-Anchor\" href=\"#7-空格\">#</a> 7. 空格</h3>\n<ul>\n<li>二元和三元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">++ x;</span><br><span class=\"line\">y ++;</span><br><span class=\"line\">z = x?1:2;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">++x;</span><br><span class=\"line\">y++;</span><br><span class=\"line\">z = x ? 1 : 2;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>用作代码块起始的左花括号 { 前必须有一个空格。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (condition)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">funcName</span></span>()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (condition) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">funcName</span></span>() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>if /else/for /while/function /switch/do /try/catch /finally 关键字后，必须有一个空格。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\"><span class=\"keyword\">if</span>(condition) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span>(condition) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"title\">function</span></span>() &#123;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> (condition) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在对象创建时，属性中的：之后必须有空格，: 之前不允许有空格。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a : 1,</span><br><span class=\"line\">    b:2,</span><br><span class=\"line\">    c :3</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a: 1,</span><br><span class=\"line\">    b: 2,</span><br><span class=\"line\">    c: 3</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"8-换行\"><a class=\"markdownIt-Anchor\" href=\"#8-换行\">#</a> 8. 换行</h3>\n<ul>\n<li>每个独立语句结束后必须换行。</li>\n<li>在函数声明、函数表达式、函数调用、对象创建、数组创建、for 语句等场景中，不允许在，或；前换行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a: 1</span><br><span class=\"line\">    , b: 2</span><br><span class=\"line\">    , c: 3,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">test</span></span>()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (const key <span class=\"keyword\">in</span> object)</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">    const element = object[key];</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// good</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">    a: 1,</span><br><span class=\"line\">    b: 2,</span><br><span class=\"line\">    c: 3,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">test</span></span>() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (const key <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (object.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">    const element = object[key];</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>下列关键字后：else, catch, finally 不需要换行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (e) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">finally &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">try &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; catch (e) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125; finally &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-数组-对象\"><a class=\"markdownIt-Anchor\" href=\"#9-数组-对象\">#</a> 9. 数组、对象</h3>\n<ul>\n<li>对象属性名不需要加引号；</li>\n<li>对象以缩进的形式书写，不要写在一行；</li>\n<li>数组最后不要有逗号。</li>\n<li>对象最后要有逗号。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">const a = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;b&#x27;</span>: 1</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const a = &#123;b: 1&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const a = &#123;</span><br><span class=\"line\">    b: 1,</span><br><span class=\"line\">    c: 2</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const arr = [1, 2, 3, 4,];</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">const a = &#123;</span><br><span class=\"line\">    b: 1,</span><br><span class=\"line\">    c: 2,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const arr = [1, 2, 3, 4];</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-命名\"><a class=\"markdownIt-Anchor\" href=\"#10-命名\">#</a> 10. 命名</h3>\n<ul>\n<li>\n<p>类名：大驼峰式风格，字母和数字，例如：AbcTest。禁止汉字、特殊符号，禁止非大驼峰式风格。</p>\n</li>\n<li>\n<p>函数名：小驼峰式风格，字母和数字，例如：abcTest。禁止汉字、特殊符号，禁止非小驼峰式风格，例如 snake_case 等。</p>\n</li>\n<li>\n<p>变量名：同函数名。</p>\n</li>\n<li>\n<p>常量：全大写风格，大写字母、数字和下划线，单词之间以下划线分隔，例如：ABC_TEST。禁止汉字、特殊符号、小写字母。</p>\n</li>\n<li>\n<p>使用 onXxx 形式作为 props 中用于回调的属性名称。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">IProps</span> &#123;</span><br><span class=\"line\">  onClose?: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">  onOk?: <span class=\"function\">(<span class=\"params\">item: Record&lt;string, any&gt;</span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>组件内的事件函数使用 handle 开头尾，handleCheckBtn。</li>\n<li>使用 withXxx 形式的词作为高阶组件的名称。</li>\n<li>接口命名前面带上 I 表示 interface</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface <span class=\"title class_\">IProps</span> &#123;&#125;</span><br><span class=\"line\">interface <span class=\"title class_\">IState</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"11-类型断言\"><a class=\"markdownIt-Anchor\" href=\"#11-类型断言\">#</a> 11. 类型断言</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\"><span class=\"keyword\">function</span> getLength(something: string | number): number &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> something.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// index.ts(2,22): error TS2339: Property <span class=\"string\">&#x27;length&#x27;</span> does not exist on <span class=\"built_in\">type</span> <span class=\"string\">&#x27;string | number&#x27;</span>.</span><br><span class=\"line\">//   Property <span class=\"string\">&#x27;length&#x27;</span> does not exist on <span class=\"built_in\">type</span> <span class=\"string\">&#x27;number&#x27;</span>.</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\"><span class=\"keyword\">function</span> getLength(something: string | number): number &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((&lt;string&gt;something).length) &#123;</span><br><span class=\"line\">        return (&lt;string&gt;something).length;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        return something.toString().length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">function getLength(something: string | number): number &#123;</span><br><span class=\"line\">  if (typeof something === &#x27;string&#x27;) &#123;</span><br><span class=\"line\">    return something.length;</span><br><span class=\"line\">  &#125; else &#123;</span><br><span class=\"line\">    return something.toString().length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"12-interface-声明顺序\"><a class=\"markdownIt-Anchor\" href=\"#12-interface-声明顺序\">#</a> 12. interface 声明顺序</h3>\n<p>日常用到比较多的是四种，只读参数放第一位，必选参数第二位，可选参数次之，不确定参数放最后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface iProps &#123;</span><br><span class=\"line\">  <span class=\"built_in\">readonly</span> x: number;</span><br><span class=\"line\">  <span class=\"built_in\">readonly</span> y: number;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">  age: number;</span><br><span class=\"line\">  height?: number;</span><br><span class=\"line\">  [propName: string]: any;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"13-ts-好用的相关工具泛型\"><a class=\"markdownIt-Anchor\" href=\"#13-ts-好用的相关工具泛型\">#</a> 13. ts 好用的相关工具泛型</h3>\n<ul>\n<li>Record&lt;string,any&gt; 用这个来声明对象结构的类型</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用于定义一个javascript的对象，key是字符串，value是任意类型</span><br><span class=\"line\">const people:Record&lt;string,any&gt; = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;chengfeng&#x27;</span>,</span><br><span class=\"line\">    age: 10</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Partial 作用是将传入的属性变为可选项.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface iPeople &#123;</span><br><span class=\"line\">    title: string;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const people: Partial&lt;iPeople&gt; = &#123;</span><br><span class=\"line\">    title: <span class=\"string\">&#x27;Delete inactive users&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">定义的结构可以是接口iPeople的任意key</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Readonly 作用是将传入的属性变为变成只读</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface iPeople &#123;</span><br><span class=\"line\">    title: string;</span><br><span class=\"line\">    name: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const people: Readonly&lt;Todo&gt; = &#123;</span><br><span class=\"line\">    title: <span class=\"string\">&#x27;todo list&#x27;</span>,</span><br><span class=\"line\">    name: chenfeng;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">title name属性就是只读的了</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Required 的作用是将传入的属性变为必选项</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface iPeople &#123;</span><br><span class=\"line\">    title?: string;</span><br><span class=\"line\">    name?: string;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const people1: Props = &#123; title: <span class=\"string\">&#x27;ts&#x27;</span> &#125;; // OK</span><br><span class=\"line\"></span><br><span class=\"line\">const people22: Required&lt;iPeople&gt; = &#123; title: <span class=\"string\">&#x27;ts&#x27;</span> &#125;; // Error: property <span class=\"string\">&#x27;name&#x27;</span> missing</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0LUhhbmRib29rL2RpZmZzLzA/YmFzZV9zaGE9MjJiMzdhMmQ4YzlhMWRkMzc4Nzk1NDQ0YmFmOTU0YzJlN2VjY2NmNSZhbXA7Y29tbWVudGFibGU9dHJ1ZSZhbXA7aGVhZF91c2VyPWNzYW50b3M0MiZhbXA7cHVsbF9udW1iZXI9ODAxJmFtcDtzaGExPTIyYjM3YTJkOGM5YTFkZDM3ODc5NTQ0NGJhZjk1NGMyZTdlY2NjZjUmYW1wO3NoYTI9OWQ0YzU2ZjVkNDE0ZGJlMjM3ODA3MTk4ODViYWEzZGY0MDIyMjQxMiZhbXA7c2hvcnRfcGF0aD0wYjJkYTUxJmFtcDt1bmNoYW5nZWQ9ZXhwYW5kZWQmYW1wO3V0Zjg9JUUyJTlDJTkzI3JlcXVpcmVkdA==\">查看更多</span></p>\n<h3 id=\"14-ts-一些好用的小-tips\"><a class=\"markdownIt-Anchor\" href=\"#14-ts-一些好用的小-tips\">#</a> 14. ts 一些好用的小 tips</h3>\n<ul>\n<li>keyof</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface iPeople &#123;</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">  age: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">type</span> T = keyof iPeople // -&gt; <span class=\"string\">&quot;name&quot;</span> | <span class=\"string\">&quot;age&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>in</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">type</span> Keys = <span class=\"string\">&quot;a&quot;</span> | <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">type</span> Obj =  &#123;</span><br><span class=\"line\">  [p <span class=\"keyword\">in</span> Keys]: any</span><br><span class=\"line\">&#125; // -&gt; &#123; a: any, b: any &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"15-规范其他\"><a class=\"markdownIt-Anchor\" href=\"#15-规范其他\">#</a> 15. 规范其他</h3>\n<ul>\n<li>不要使用 var 声明变量</li>\n<li>不会被修改的变量使用 const 声明</li>\n<li>去除声明但未被引用的代码</li>\n<li>禁止在代码里使用 debug</li>\n<li>不允许有空的代码块</li>\n</ul>\n<h3 id=\"16-仅当初始-state-需要从-props-计算得到的时候才将-state-的声明放在构造函数中其它情况下使用静态属性声明-state并且一般情况下不要将-prop-传给-state\"><a class=\"markdownIt-Anchor\" href=\"#16-仅当初始-state-需要从-props-计算得到的时候才将-state-的声明放在构造函数中其它情况下使用静态属性声明-state并且一般情况下不要将-prop-传给-state\">#</a> 16. 仅当初始 state 需要从 props 计算得到的时候，才将 state 的声明放在构造函数中，其它情况下使用静态属性声明 state, 并且一般情况下不要将 prop 传给 state，</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span> ()&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">people</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">people</span> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"attr\">state</span>: <span class=\"title class_\">IState</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">people</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"17-渲染默认值\"><a class=\"markdownIt-Anchor\" href=\"#17-渲染默认值\">#</a> 17. 渲染默认值</h3>\n<ul>\n<li>添加非空判断可以提高代码的稳健性，例如后端返回的一些值，可能会出现不存在的情况，应该要给默认值.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  &#123;name&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  &#123;!!name || <span class=\"string\">&#x27;--&#x27;</span>&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>还有一种情况，就是本来后端应该返回一个数组给你，但是数据库取不到数据，可能后端给你返回了 null, 然后前端 null.length。这样就 gg 了</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; list, totalCount &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">getPeopleList</span>(keyword, page, pageSize);</span><br><span class=\"line\">list 可能是<span class=\"literal\">null</span>或者<span class=\"literal\">undefined</span></span><br><span class=\"line\">list.<span class=\"property\">length</span>将直接导致前端报错</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">status</span>: <span class=\"variable constant_\">STATUS</span>.<span class=\"property\">READY</span>,</span><br><span class=\"line\">  <span class=\"attr\">apps</span>: list,</span><br><span class=\"line\">  <span class=\"attr\">total</span>: totalCount,</span><br><span class=\"line\">  <span class=\"attr\">page</span>: page,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; list, totalCount &#125; = <span class=\"keyword\">await</span> <span class=\"title function_\">getPeopleList</span>(keyword, page, pageSize);</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">status</span>: <span class=\"variable constant_\">STATUS</span>.<span class=\"property\">READY</span>,</span><br><span class=\"line\">  <span class=\"attr\">apps</span>: list || [],</span><br><span class=\"line\">  <span class=\"attr\">total</span>: totalCount || <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">page</span>: page,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"18-不确定的属性最后却疯狂的用访问不存在的属性\"><a class=\"markdownIt-Anchor\" href=\"#18-不确定的属性最后却疯狂的用访问不存在的属性\">#</a> 18. 不确定的属性，最后却疯狂的用… 访问不存在的属性</h3>\n<p>例如一些地方，不确定这个变量里面到底有什么，但自己觉得有，就疯狂的…, 最明显的就是后端返回了一个对象给你，前端拿到之后判断都不判断直接 data.dataList.forEach ()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"title function_\">getPeopleList</span>(keyword, page, pageSize);</span><br><span class=\"line\">data.<span class=\"property\">dataList</span>.<span class=\"title function_\">forEach</span>() <span class=\"comment\">// 直接挂了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"title function_\">getPeopleList</span>(keyword, page, pageSize);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (data &amp;&amp; data.<span class=\"property\">dataList</span> &amp;&amp; <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"params\">data.dataList</span>) &#123;</span><br><span class=\"line\">    data.<span class=\"property\">dataList</span>.<span class=\"title function_\">forEach</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"19-数据格式转换\"><a class=\"markdownIt-Anchor\" href=\"#19-数据格式转换\">#</a> 19. 数据格式转换</h3>\n<ol>\n<li>把字符串转整型可以使用 + 号</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> maxPrice = +form.<span class=\"property\">maxPrice</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> maxPrice = <span class=\"title class_\">Number</span>(form.<span class=\"property\">maxPrice</span>.<span class=\"property\">value</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>转成 boolean 值用！！</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> mobile = !!ua.<span class=\"title function_\">match</span>(<span class=\"regexp\">/iPhone|iPad|Android|iPod|Windows Phone/</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"20-判断条件真假\"><a class=\"markdownIt-Anchor\" href=\"#20-判断条件真假\">#</a> 20. 判断条件真假</h3>\n<p>js 中以下为假，其他情况为真</p>\n<ul>\n<li>false</li>\n<li>null</li>\n<li>undefined</li>\n<li>0</li>\n<li>‘’ (空字符串)</li>\n<li>NaN</li>\n</ul>\n<h3 id=\"21-简单组件可以使用函数代替\"><a class=\"markdownIt-Anchor\" href=\"#21-简单组件可以使用函数代替\">#</a> 21. 简单组件可以使用函数代替</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Listing</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.props.hello&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Listing</span>(<span class=\"params\">&#123; hello &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;hello&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"22-对于常用的属性进行缓存\"><a class=\"markdownIt-Anchor\" href=\"#22-对于常用的属性进行缓存\">#</a> 22. 对于常用的属性进行缓存</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">props</span>.<span class=\"property\">app</span>.<span class=\"property\">openid</span>;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">time</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; app &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">props</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; time &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(app.<span class=\"property\">openid</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"23-input-输入框使用-trim\"><a class=\"markdownIt-Anchor\" href=\"#23-input-输入框使用-trim\">#</a> 23. input 输入框使用 trim ()</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> searchContent = form.<span class=\"property\">search</span>.<span class=\"property\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> searchContent = form.<span class=\"property\">search</span>.<span class=\"property\">value</span>.<span class=\"title function_\">trim</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"24-使用-location-跳转前需要先转义\"><a class=\"markdownIt-Anchor\" href=\"#24-使用-location-跳转前需要先转义\">#</a> 24. 使用 location 跳转前需要先转义</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span> = redirectUrl + <span class=\"string\">&quot;?a=10&amp;b=20&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span> = redirectUrl + <span class=\"built_in\">encodeURIComponent</span>(<span class=\"string\">&quot;?a=10&amp;b=20&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"25-使用-react-router\"><a class=\"markdownIt-Anchor\" href=\"#25-使用-react-router\">#</a> 25. 使用 react-router</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter, <span class=\"title class_\">RouteComponentProps</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> interface <span class=\"title class_\">IProps</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RouteComponentProps</span>&lt;any&gt; &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"title class_\">IProps</span>, <span class=\"title class_\">AppStates</span>&gt; &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">withRouter</span>(<span class=\"title class_\">App</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; withRouter, <span class=\"title class_\">RouteComponentProps</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-router-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;</span><br><span class=\"line\">  <span class=\"title class_\">IProps</span> &amp; <span class=\"title class_\">RouteComponentProps</span>&lt;&#123;&#125;&gt;,</span><br><span class=\"line\">  <span class=\"title class_\">AppStates</span></span><br><span class=\"line\">&gt; &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">withRouter</span>(<span class=\"title class_\">App</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"26-同时开发数据请求-api-目录-git-冲突目录方案\"><a class=\"markdownIt-Anchor\" href=\"#26-同时开发数据请求-api-目录-git-冲突目录方案\">#</a> 26. 同时开发，数据请求 api 目录 git 冲突目录方案</h3>\n<ul>\n<li>在 api 目录下新建一个目录，目录对应一级 tab, 这个目录内放置一个 index.js ，最后把二级 tab 组件所使用的 api 请求都在这个 index.js 内引入。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 目前</span><br><span class=\"line\"></span><br><span class=\"line\">|- api</span><br><span class=\"line\">  |- pageA.ts</span><br><span class=\"line\">  |- pageB.ts</span><br><span class=\"line\"></span><br><span class=\"line\">// 建议</span><br><span class=\"line\"></span><br><span class=\"line\">|- api</span><br><span class=\"line\">  |- pageA</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\">    |- aaa.js</span><br><span class=\"line\">    |- bbb.js</span><br><span class=\"line\">  |- pageB</span><br><span class=\"line\">    |- index.js</span><br><span class=\"line\">    |- aaa.js</span><br><span class=\"line\">    |- bbb.js</span><br><span class=\"line\">    |- ccc.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"27-组件嵌套过深\"><a class=\"markdownIt-Anchor\" href=\"#27-组件嵌套过深\">#</a> 27. 组件嵌套过深</h3>\n<ul>\n<li>组件一般不要超过三层，最多四层，层级过深可能会导致数据传递过深，在做一些颗粒度比较细的操作的时候，处理起来较为繁琐，可以使用 redux 等状态管理工具替代。</li>\n</ul>\n<h3 id=\"28-代码过滤掉你没考虑到的情况\"><a class=\"markdownIt-Anchor\" href=\"#28-代码过滤掉你没考虑到的情况\">#</a> 28. 代码过滤掉你没考虑到的情况</h3>\n<ul>\n<li>例如一个函数，你只想操作字符串，那你必须在函数开头就只允许参数是字符串</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> parse (str:string)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (typeof(str) === <span class=\"string\">&#x27;string&#x27;</span> ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"29-业务代码里面的异步请求需要-try-catch\"><a class=\"markdownIt-Anchor\" href=\"#29-业务代码里面的异步请求需要-try-catch\">#</a> 29. 业务代码里面的异步请求需要 try catch</h3>\n<ul>\n<li>ajax 请求，使用 try catch，错误提示后端返回，并且做一些失败后的状态操作例如进入列表页，我们需要一个 loading 状态，然后去请求数据，可是失败之后，也需要把 loading 状态去掉，把 loading 隐藏的代码就写在 finally 里面。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getStudentList = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">loading</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">isEmpty</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">getStudentList</span>(&#123;&#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  失败之后的一些兜底操作</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">isEmpty</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"30-setstate-有三种用法\"><a class=\"markdownIt-Anchor\" href=\"#30-setstate-有三种用法\">#</a> 30. setState 有三种用法</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 对象</span><br><span class=\"line\">this.setState(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 函数，一般是用于在setState之前做一些操作</span><br><span class=\"line\">this.setState(</span><br><span class=\"line\">  () =&gt; &#123;</span><br><span class=\"line\">    // TODO</span><br><span class=\"line\">    console.log(<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">return</span> &#123;</span><br><span class=\"line\">      a:300</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// 第二个参数，一般是用于在setState之后做一些操作</span><br><span class=\"line\">this.setState(&#123;</span><br><span class=\"line\">  a:300</span><br><span class=\"line\">&#125;, () =&gt; &#123;</span><br><span class=\"line\">  // TODO</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"31-setstate-可能是同步的\"><a class=\"markdownIt-Anchor\" href=\"#31-setstate-可能是同步的\">#</a> 31. setState 可能是同步的</h3>\n<ul>\n<li>setState 在 react 里的合成事件和钩子函数中是 “异步” 的。</li>\n<li>setState 在原生事件和 setTimeout 中是同步的。</li>\n</ul>\n<h3 id=\"32-不要在-setstate-前面加-await\"><a class=\"markdownIt-Anchor\" href=\"#32-不要在-setstate-前面加-await\">#</a> 32. 不要在 setState 前面加 await</h3>\n<ul>\n<li>setState 前面也是可以带 await 的，会变成同步设置状态，但这是一种巧合，不确定未来哪个版本就不支持了，为了遵循 react 框架的设计原则，我们使用回掉函数的形式。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\">func = <span class=\"keyword\">async</span> (name, value, status) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\">func = <span class=\"function\">(<span class=\"params\">name, value, status</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// TODO</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"33-阻止事件默认行为\"><a class=\"markdownIt-Anchor\" href=\"#33-阻止事件默认行为\">#</a> 33. 阻止事件默认行为</h3>\n<ul>\n<li>在 React 中你不能通过返回 false 来阻止默认行为。必须明确调用 preventDefault 。</li>\n</ul>\n<h3 id=\"34-在-componentwillunmount-里面去除副作用的函数\"><a class=\"markdownIt-Anchor\" href=\"#34-在-componentwillunmount-里面去除副作用的函数\">#</a> 34. 在 componentWillUnmount 里面去除副作用的函数</h3>\n<ul>\n<li>清除 EventListener</li>\n<li>中止数据请求</li>\n<li>清除定时器</li>\n</ul>\n<h3 id=\"35-key\"><a class=\"markdownIt-Anchor\" href=\"#35-key\">#</a> 35. key</h3>\n<ul>\n<li>对于组件中的 key 优化，起到最大化重用 dom</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bad</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">dataAry</span>.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;index&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//good</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">dataAry</span>.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item.id&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"36-for-in-中一定要有-hasownproperty-的判断即禁止直接读取原型对象的属性\"><a class=\"markdownIt-Anchor\" href=\"#36-for-in-中一定要有-hasownproperty-的判断即禁止直接读取原型对象的属性\">#</a> 36. for-in 中一定要有 hasOwnProperty 的判断（即禁止直接读取原型对象的属性）</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  arr.<span class=\"title function_\">push</span>(obj[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">    arr.<span class=\"title function_\">push</span>(obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"37-第三方库函数的使用\"><a class=\"markdownIt-Anchor\" href=\"#37-第三方库函数的使用\">#</a> 37. 第三方库函数的使用</h3>\n<ul>\n<li>用 try catch 包裹，防止第三方库的出现错误，导致整个程序崩溃</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Echart 用于代绘制图表，但当其自身发生错误时，可能影响到业务代码的执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> iniDom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;init-container&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> echartObj = echarts.<span class=\"title function_\">init</span>(iniDom);</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    echartObj,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; echartObj &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 更新图表</span></span><br><span class=\"line\">    echartObj.<span class=\"title function_\">setOption</span>(<span class=\"variable constant_\">CHART_CONFIG</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> iniDom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;init-container&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> echartObj = echarts.<span class=\"title function_\">init</span>(iniDom);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      echartObj,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; echartObj &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 更新图表</span></span><br><span class=\"line\">      echartObj.<span class=\"title function_\">setOption</span>(<span class=\"variable constant_\">CHART_CONFIG</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"38-防止-xss-攻击\"><a class=\"markdownIt-Anchor\" href=\"#38-防止-xss-攻击\">#</a> 38. 防止 xss 攻击</h3>\n<ul>\n<li>input，textarea 等标签，不要直接把 html 文本直接渲染在页面上，使用 xssb 等过滤之后再输出到标签上；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; html2text &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;xss&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  <span class=\"attr\">dangerouslySetInnerHTML</span>=<span class=\"string\">&#123;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">    <span class=\"attr\">__html:</span> <span class=\"attr\">html2text</span>(<span class=\"attr\">htmlContent</span>)</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">  &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">/&gt;</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"39-在组件中获取真实-dom\"><a class=\"markdownIt-Anchor\" href=\"#39-在组件中获取真实-dom\">#</a> 39. 在组件中获取真实 dom</h3>\n<ul>\n<li>使用 16 版本后的 createRef () 函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;iProps, iState&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">inputRef</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">createRef</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.inputRef&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">inputRef</span>.<span class=\"property\">current</span>.<span class=\"title function_\">focus</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"40-减少魔法数字\"><a class=\"markdownIt-Anchor\" href=\"#40-减少魔法数字\">#</a> 40. 减少魔法数字</h3>\n<ul>\n<li>写代码的时候尽量减少一些未知含义的数字，尽量用英文单词。例如 type === 0 的时候做了一些操作，让人不知所以然。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (type !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">STATUS</span>: <span class=\"title class_\">Record</span>&lt;string, any&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">READY</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">FETCHING</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">FAILED</span>: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (type === <span class=\"variable constant_\">STATUS</span>.<span class=\"property\">READY</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// best</span></span><br><span class=\"line\">enum <span class=\"variable constant_\">STATUS</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 就绪</span></span><br><span class=\"line\">  <span class=\"variable constant_\">READY</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 请求中</span></span><br><span class=\"line\">  <span class=\"variable constant_\">FETCHING</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 请求失败</span></span><br><span class=\"line\">  <span class=\"variable constant_\">FAILED</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"41-如果需要优化-react-性能一般用不到\"><a class=\"markdownIt-Anchor\" href=\"#41-如果需要优化-react-性能一般用不到\">#</a> 41. 如果需要优化 react 性能（一般用不到）</h3>\n<ul>\n<li>如果组件的 state 和 props 都是简单类型，可以继承 PureComponent 而不是 Component</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Component</span>, <span class=\"title class_\">PureComponent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Message</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;this.state.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Message</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">PureComponent</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;this.state.message&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重写 shouldComponentUpdate 方法，在 shouldComponentUpdate 里面根据 state,props 是否有改变来判断是否需要重新渲染。如果组件继承了 PureComponent 就没必要再重写 shouldComponentUpdate 方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; isReactPropsEqual, isReactStateEqual &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@fe/common/lib/equal&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">shouldComponentUpdate</span>(<span class=\"params\">nextProps:IProps, nextState:IState</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isReactStateEqual</span>(nextState,<span class=\"variable language_\">this</span>.<span class=\"property\">state</span>) &amp;&amp; <span class=\"title function_\">isReactPropsEqual</span>(nextProps,<span class=\"variable language_\">this</span>.<span class=\"property\">props</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"42-event-事件对象类型\"><a class=\"markdownIt-Anchor\" href=\"#42-event-事件对象类型\">#</a> 42. Event 事件对象类型</h3>\n<p>很多小伙伴用了很久的 ts, 都不知道常用 Event 事件对象类型：</p>\n<p>ClipboardEvent&lt;T = Element&gt; 剪贴板事件对象</p>\n<p>DragEvent&lt;T = Element&gt; 拖拽事件对象</p>\n<p>ChangeEvent&lt;T = Element&gt; Change 事件对象</p>\n<p>KeyboardEvent&lt;T = Element&gt; 键盘事件对象</p>\n<p>MouseEvent&lt;T = Element&gt; 鼠标事件对象</p>\n<p>TouchEvent&lt;T = Element&gt; 触摸事件对象</p>\n<p>WheelEvent&lt;T = Element&gt; 滚轮事件对象</p>\n<p>AnimationEvent&lt;T = Element&gt; 动画事件对象</p>\n<p>TransitionEvent&lt;T = Element&gt; 过渡事件对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">MouseEvent</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">interface <span class=\"title class_\">IProps</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">onClick</span>(<span class=\"attr\">event</span>: <span class=\"title class_\">MouseEvent</span>&lt;<span class=\"title class_\">HTMLDivElement</span>&gt;): <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"43-使用私有属性取代-state-状态\"><a class=\"markdownIt-Anchor\" href=\"#43-使用私有属性取代-state-状态\">#</a> 43. 使用私有属性取代 state 状态</h3>\n<p>对于一些不需要控制 ui 的状态属性，我们可以直接绑到 this 上， 即私有属性，没有必要弄到 this.state 上，不然会触发渲染机制，造成性能浪费 例如请求翻页数据的时候，我们都会有个变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">state: IState = &#123;</span><br><span class=\"line\">  pageNo:1,</span><br><span class=\"line\">  pageSize:10</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">queryParams:Record&lt;string,any&gt; = &#123;</span><br><span class=\"line\">  pageNo:1,</span><br><span class=\"line\">  pageSize:10</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"44-代码细粒度的思考\"><a class=\"markdownIt-Anchor\" href=\"#44-代码细粒度的思考\">#</a> 44. 代码细粒度的思考</h3>\n<p>总结四句话。我们在写组件或者函数的的时候，工具函数和业务逻辑抽离，表单校验和业务抽离、事件函数和业务抽离，ajax 和业务抽离。 例如有些页面是通过 location.href 跳转的，我们有些业务逻辑等都是放到 didmountMount, 但是后期改需求，可能要用 react-router 进行跳转，可能要改的逻辑就会很多了，所以函数抽离出来，需求更新就少改一点代码。 如果还不确定如何划分函数的细粒度，我有个建议。使用过两次以上的代码，要抽离组件或者函数，两次的可以不用</p>\n<h3 id=\"45-if-else-等判断太多了后期难以维护\"><a class=\"markdownIt-Anchor\" href=\"#45-if-else-等判断太多了后期难以维护\">#</a> 45. if else 等判断太多了，后期难以维护。</h3>\n<p>个人觉得 if else 嵌套深看起来也不会太难受，难受的是，项目迭代久之后，自己都忘记曾经写过这些代码，而且类型多或者不确定有什么类型，是否后期还会加的情况下，改起来就非常复杂了，而且很容易踩坑和背锅。 用配置取代 if 嵌套，大概就是抽离一个 config.ts 出来，里面放一些配置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如你的业务代码里面，会根据不同url参数，代码会执行不同的逻辑.</span><br><span class=\"line\">/info?<span class=\"built_in\">type</span>=wechat&amp;uid=123456&amp;</span><br><span class=\"line\">const qsObj = qs(window.location.url)</span><br><span class=\"line\">const urlType = qsObj.<span class=\"built_in\">type</span></span><br><span class=\"line\">// bad</span><br><span class=\"line\"><span class=\"keyword\">if</span> (urlType === <span class=\"string\">&#x27;wechat&#x27;</span>) &#123;</span><br><span class=\"line\">    doSomeThing()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"function\"><span class=\"title\">if</span></span> () &#123;</span><br><span class=\"line\">    doSomeThing()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"function\"><span class=\"title\">if</span></span> () &#123;</span><br><span class=\"line\">    doSomeThing()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"function\"><span class=\"title\">if</span></span> () &#123;</span><br><span class=\"line\">    doSomeThing()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">config.t</span><br><span class=\"line\">const urlTypeConfig: Record&lt;string, typeItem&gt; = &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;wechat&#x27;</span>: &#123; // key 就是对应的<span class=\"built_in\">type</span></span><br><span class=\"line\">    name: <span class=\"string\">&#x27;wechat&#x27;</span>,</span><br><span class=\"line\">    show: [<span class=\"string\">&#x27;header&#x27;</span>, <span class=\"string\">&#x27;footer&#x27;</span>, <span class=\"string\">&#x27;wechat&#x27;</span>] // 展示什么，可能是异步的</span><br><span class=\"line\">    pession: [<span class=\"string\">&#x27;admin&#x27;</span>], // 权限是什么，可能是异步的</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&#x27;zhifubao&#x27;</span>: &#123; // key 就是对应的<span class=\"built_in\">type</span></span><br><span class=\"line\">    name: <span class=\"string\">&#x27;zhifubao&#x27;</span>,</span><br><span class=\"line\">    show: [<span class=\"string\">&#x27;header&#x27;</span>, <span class=\"string\">&#x27;footer&#x27;</span>, <span class=\"string\">&#x27;zhifubao&#x27;</span>] // 展示什么，可能是异步的</span><br><span class=\"line\">    pession: [<span class=\"string\">&#x27;admin&#x27;</span>], // 权限是什么，可能是异步的</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 业务逻辑</span><br><span class=\"line\">const qsObj = qs(window.location.url)</span><br><span class=\"line\">const urlType = qsObj.<span class=\"built_in\">type</span></span><br><span class=\"line\">Object.keys(urlTypeConfig).forEach(item =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(urlType === item.type) &#123;</span><br><span class=\"line\">    doSomeThing(item.show)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"46-不要使用-renderxxx要使用函数式组件\"><a class=\"markdownIt-Anchor\" href=\"#46-不要使用-renderxxx要使用函数式组件\">#</a> 46. 不要使用 renderXXX, 要使用函数式组件</h3>\n<p>发现团队一些小伙伴为了减少 render 函数里面的代码量，会把一些元素拆分到函数里面。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">  renderHeader = () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (&lt;div /&gt;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  renderBody = () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (&lt;div /&gt;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  renderFooter = () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (&lt;div /&gt;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span>(</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        renderHeader()</span><br><span class=\"line\">        renderBody()</span><br><span class=\"line\">        renderFooter()</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>更好的办法，是用函数式组件取代在当前组件里面写方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// good</span><br><span class=\"line\"> <span class=\"keyword\">function</span> RenderHeader(props) =  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (&lt;div /&gt;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> <span class=\"keyword\">function</span> RenderBody(props) =  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (&lt;div /&gt;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> <span class=\"keyword\">function</span> RenderFooter(props) =  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> (&lt;div /&gt;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">class Component extends React.Component&lt;iProps, iState&gt;&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span></span> () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span>(</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;RenderHeader /&gt;</span><br><span class=\"line\">        &lt;RenderBody /&gt;</span><br><span class=\"line\">        &lt;RenderFooter /&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"47-a-标签安全问题\"><a class=\"markdownIt-Anchor\" href=\"#47-a-标签安全问题\">#</a> 47. a 标签安全问题</h3>\n<p>使用 a 标签打开一个新窗口过程中的安全问题。新页面中可以使用 window.opener 来控制原始页面。如果新老页面同域，那么在新页面中可以任意操作原始页面。如果是不同域，新页面中依然可以通过 window.opener.location，访问到原始页面的 location 对象</p>\n<p>在带有 target=&quot;_blank&quot; 的 a 标签中，加上 rel=&quot;noopener&quot; 属性。如果使用 window.open 的方式打开页面，将 opener 对象置为空。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var newWindow = window.open();</span><br><span class=\"line\">newWindow.opener = null;</span><br></pre></td></tr></table></figure>\n<h3 id=\"48-void-0-替代-undefined\"><a class=\"markdownIt-Anchor\" href=\"#48-void-0-替代-undefined\">#</a> 48. void 0 替代 undefined</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clearSessioin = () =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  req.session.userName = undefined;</span><br><span class=\"line\"></span><br><span class=\"line\">  req.session.userName = void 0</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"49-前端不要操作-cookie\"><a class=\"markdownIt-Anchor\" href=\"#49-前端不要操作-cookie\">#</a> 49. 前端不要操作 cookie</h3>\n<p>在做一些前后端鉴权的时候，后端应该开启 domain,secure,httponly 严格模式，禁止前端操作 cookie，防止 csrf 攻击。</p>\n<h3 id=\"50-代码检查插件\"><a class=\"markdownIt-Anchor\" href=\"#50-代码检查插件\">#</a> 50. 代码检查插件</h3>\n<p>我们可以使用构建工具继承 husky eslint tslint lint-stage prettier 来规范代码。</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50LWNvbmZpZy1wcmV0dGllcg==\">eslint-config-prettier</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50LXBsdWdpbi1wcmV0dGllcg==\">eslint-plugin-prettier</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50LXBsdWdpbi1yZWFjdA==\">eslint-plugin-react</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHNsaW50LXJlYWN0\">tslint-react</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHNsaW50LXBsdWdpbi1wcmV0dGllcg==\">tslint-plugin-prettier</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHNsaW50LWNvbmZpZy1wcmV0dGllcg==\">tslint-config-prettier</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0ZhaXRocmVlL3dlYi1idWlsZC10b29sLWRlbW8vdHJlZS9tYXN0ZXIvMjgtd29ya2Zsb3c=\">团队开发工作流</span></li>\n</ul>\n<h3 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\">#</a> 参考</h3>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FpcmJuYi9qYXZhc2NyaXB0L3RyZWUvbWFzdGVyL3JlYWN0I2FsaWdubWVudA==\">airbnb</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2ltd2ViLmdpdGh1Yi5pby9Db2RlR3VpZGUv\">imweb 代码规范</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzNTAyNjExNzU5MTE3I2hlYWRpbmctNQ==\">如何无痛降低 if else 面条代码复杂度</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzNjM2NzQ5Nzc4OTU4I2hlYWRpbmctNQ==\">你真的理解 setState 吗？</span></li>\n</ul>\n",
            "tags": [
                "前端"
            ]
        }
    ]
}