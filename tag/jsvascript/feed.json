{
    "version": "https://jsonfeed.org/version/1",
    "title": "xu·live • All posts by \"jsvascript\" tag",
    "description": "永远热泪盈眶",
    "home_page_url": "https://18859421790.github.io",
    "items": [
        {
            "id": "https://18859421790.github.io/2023/10/10/2023.10.10/",
            "url": "https://18859421790.github.io/2023/10/10/2023.10.10/",
            "title": "防抖节流深拷贝",
            "date_published": "2023-10-09T16:00:00.000Z",
            "content_html": "<h3 id=\"防抖手写简化版\"><a class=\"markdownIt-Anchor\" href=\"#防抖手写简化版\">#</a> 防抖手写简化版:</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 防抖函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">debounce</span> = (<span class=\"params\">fn, delay</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>适用场景：</p>\n<ul>\n<li>按钮提交场景：防止多次提交按钮，只执行最后提交的一次</li>\n<li>服务端验证场景：表单验证需要服务端配合，只执行一段连续的输入事件的最后一次，还有搜索联想词功能类似</li>\n<li>生产环境请用 lodash.debounce</li>\n</ul>\n<h3 id=\"实现节流函数throttle\"><a class=\"markdownIt-Anchor\" href=\"#实现节流函数throttle\">#</a> 实现节流函数（throttle）</h3>\n<p>防抖函数原理：规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p>\n<p>手写简化版:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节流函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">throttle</span> = (<span class=\"params\">fn, delay = <span class=\"number\">500</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!flag) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">      flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>适用场景：</p>\n<ul>\n<li>拖拽场景：固定时间内只执行一次，防止超高频次触发位置变动</li>\n<li>缩放场景：监控浏览器 resize</li>\n<li>动画场景：避免短时间内多次触发动画引起性能问题</li>\n</ul>\n<h3 id=\"深克隆deepclone\"><a class=\"markdownIt-Anchor\" href=\"#深克隆deepclone\">#</a> 深克隆（deepclone）</h3>\n<ul>\n<li>简单版：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newObj = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(oldObj));</span><br></pre></td></tr></table></figure>\n<p>局限性：</p>\n<p>他无法实现对函数 、RegExp 等特殊对象的克隆</p>\n<p>会抛弃对象的 constructor, 所有的构造函数会指向 Object</p>\n<p>对象有循环引用，会报错</p>\n<p>面试版:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- deep clone</span><br><span class=\"line\">- @param &#123;[type]&#125; parent object 需要进行克隆的对象</span><br><span class=\"line\">- @<span class=\"keyword\">return</span> &#123;[type]&#125; 深克隆后的对象</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">clone</span> = parent =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 判断类型</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">isType</span> = (<span class=\"params\">obj, type</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&quot;object&quot;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> typeString = <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&quot;Array&quot;</span>:</span><br><span class=\"line\">  flag = typeString === <span class=\"string\">&quot;[object Array]&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&quot;Date&quot;</span>:</span><br><span class=\"line\">  flag = typeString === <span class=\"string\">&quot;[object Date]&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&quot;RegExp&quot;</span>:</span><br><span class=\"line\">  flag = typeString === <span class=\"string\">&quot;[object RegExp]&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"attr\">default</span>:</span><br><span class=\"line\">  flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> flag;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 处理正则</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getRegExp</span> = re =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> flags = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (re.<span class=\"property\">global</span>) flags += <span class=\"string\">&quot;g&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (re.<span class=\"property\">ignoreCase</span>) flags += <span class=\"string\">&quot;i&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (re.<span class=\"property\">multiline</span>) flags += <span class=\"string\">&quot;m&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> flags;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 维护两个储存循环引用的数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> parents = [];</span><br><span class=\"line\"><span class=\"keyword\">const</span> children = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> \\_clone = <span class=\"function\"><span class=\"params\">parent</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (parent === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> parent !== <span class=\"string\">&quot;object&quot;</span>) <span class=\"keyword\">return</span> parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> child, proto;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isType</span>(parent, <span class=\"string\">&quot;Array&quot;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 对数组做特殊处理</span></span><br><span class=\"line\">      child = [];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isType</span>(parent, <span class=\"string\">&quot;RegExp&quot;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 对正则对象做特殊处理</span></span><br><span class=\"line\">      child = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(parent.<span class=\"property\">source</span>, <span class=\"title function_\">getRegExp</span>(parent));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (parent.<span class=\"property\">lastIndex</span>) child.<span class=\"property\">lastIndex</span> = parent.<span class=\"property\">lastIndex</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isType</span>(parent, <span class=\"string\">&quot;Date&quot;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 对Date对象做特殊处理</span></span><br><span class=\"line\">      child = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(parent.<span class=\"title function_\">getTime</span>());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 处理对象原型</span></span><br><span class=\"line\">      proto = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(parent);</span><br><span class=\"line\">      <span class=\"comment\">// 利用Object.create切断原型链</span></span><br><span class=\"line\">      child = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(proto);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 处理循环引用</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> index = parents.<span class=\"title function_\">indexOf</span>(parent);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果父数组存在本对象,说明之前已经被引用过,直接返回此对象</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> children[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parents.<span class=\"title function_\">push</span>(parent);</span><br><span class=\"line\">    children.<span class=\"title function_\">push</span>(child);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 递归</span></span><br><span class=\"line\">      child[i] = <span class=\"title function_\">_clone</span>(parent[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> child;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">return</span> \\<span class=\"title function_\">_clone</span>(parent);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>局限性:</p>\n<p>一些特殊情况没有处理：例如 Buffer 对象、Promise、Set、Map<br>\n 另外对于确保没有循环引用的对象，我们可以省去对循环引用的特殊处理，因为这很消耗时间<br>\n原理详解实现深克隆</p>\n",
            "tags": [
                "jsvascript"
            ]
        }
    ]
}